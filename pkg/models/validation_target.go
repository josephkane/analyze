// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ValidationTarget validation target is specific node pr service or something else where we check that some integration is configured
// swagger:model validationTarget
type ValidationTarget struct {

	// name of validation target, it can be hostname or service name, or container name
	Name string `json:"name,omitempty"`

	// shows validation status
	// Enum: [OK FAILED]
	Status string `json:"status,omitempty"`
}

// Validate validates this validation target
func (m *ValidationTarget) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var validationTargetTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OK","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		validationTargetTypeStatusPropEnum = append(validationTargetTypeStatusPropEnum, v)
	}
}

const (

	// ValidationTargetStatusOK captures enum value "OK"
	ValidationTargetStatusOK string = "OK"

	// ValidationTargetStatusFAILED captures enum value "FAILED"
	ValidationTargetStatusFAILED string = "FAILED"
)

// prop value enum
func (m *ValidationTarget) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, validationTargetTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ValidationTarget) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ValidationTarget) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValidationTarget) UnmarshalBinary(b []byte) error {
	var res ValidationTarget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
