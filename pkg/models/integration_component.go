// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IntegrationComponent contains all info related that integration works or not for some component
// swagger:model integrationComponent
type IntegrationComponent struct {

	// component integration name
	ComponentName string `json:"componentName,omitempty"`

	// shows overall validation status for component
	// Enum: [OK IN_PROGRESS FAILED]
	Status string `json:"status,omitempty"`

	// contains performed validations
	ValidationTargets []*ValidationTarget `json:"validationTargets"`

	// contains performed validations
	Validations []*Validation `json:"validations"`
}

// Validate validates this integration component
func (m *IntegrationComponent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidationTargets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var integrationComponentTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OK","IN_PROGRESS","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		integrationComponentTypeStatusPropEnum = append(integrationComponentTypeStatusPropEnum, v)
	}
}

const (

	// IntegrationComponentStatusOK captures enum value "OK"
	IntegrationComponentStatusOK string = "OK"

	// IntegrationComponentStatusINPROGRESS captures enum value "IN_PROGRESS"
	IntegrationComponentStatusINPROGRESS string = "IN_PROGRESS"

	// IntegrationComponentStatusFAILED captures enum value "FAILED"
	IntegrationComponentStatusFAILED string = "FAILED"
)

// prop value enum
func (m *IntegrationComponent) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, integrationComponentTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IntegrationComponent) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationComponent) validateValidationTargets(formats strfmt.Registry) error {

	if swag.IsZero(m.ValidationTargets) { // not required
		return nil
	}

	for i := 0; i < len(m.ValidationTargets); i++ {
		if swag.IsZero(m.ValidationTargets[i]) { // not required
			continue
		}

		if m.ValidationTargets[i] != nil {
			if err := m.ValidationTargets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("validationTargets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IntegrationComponent) validateValidations(formats strfmt.Registry) error {

	if swag.IsZero(m.Validations) { // not required
		return nil
	}

	for i := 0; i < len(m.Validations); i++ {
		if swag.IsZero(m.Validations[i]) { // not required
			continue
		}

		if m.Validations[i] != nil {
			if err := m.Validations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("validations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IntegrationComponent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntegrationComponent) UnmarshalBinary(b []byte) error {
	var res IntegrationComponent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
