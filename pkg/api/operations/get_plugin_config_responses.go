// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"./pkg/models"
)

// GetPluginConfigOKCode is the HTTP code returned for type GetPluginConfigOK
const GetPluginConfigOKCode int = 200

/*GetPluginConfigOK no error

swagger:response getPluginConfigOK
*/
type GetPluginConfigOK struct {

	/*
	  In: Body
	*/
	Payload *models.PluginConfig `json:"body,omitempty"`
}

// NewGetPluginConfigOK creates GetPluginConfigOK with default headers values
func NewGetPluginConfigOK() *GetPluginConfigOK {

	return &GetPluginConfigOK{}
}

// WithPayload adds the payload to the get plugin config o k response
func (o *GetPluginConfigOK) WithPayload(payload *models.PluginConfig) *GetPluginConfigOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get plugin config o k response
func (o *GetPluginConfigOK) SetPayload(payload *models.PluginConfig) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPluginConfigOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPluginConfigNotFoundCode is the HTTP code returned for type GetPluginConfigNotFound
const GetPluginConfigNotFoundCode int = 404

/*GetPluginConfigNotFound Not Found

swagger:response getPluginConfigNotFound
*/
type GetPluginConfigNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetPluginConfigNotFound creates GetPluginConfigNotFound with default headers values
func NewGetPluginConfigNotFound() *GetPluginConfigNotFound {

	return &GetPluginConfigNotFound{}
}

// WithPayload adds the payload to the get plugin config not found response
func (o *GetPluginConfigNotFound) WithPayload(payload *models.Error) *GetPluginConfigNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get plugin config not found response
func (o *GetPluginConfigNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPluginConfigNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetPluginConfigDefault error

swagger:response getPluginConfigDefault
*/
type GetPluginConfigDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetPluginConfigDefault creates GetPluginConfigDefault with default headers values
func NewGetPluginConfigDefault(code int) *GetPluginConfigDefault {
	if code <= 0 {
		code = 500
	}

	return &GetPluginConfigDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get plugin config default response
func (o *GetPluginConfigDefault) WithStatusCode(code int) *GetPluginConfigDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get plugin config default response
func (o *GetPluginConfigDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get plugin config default response
func (o *GetPluginConfigDefault) WithPayload(payload *models.Error) *GetPluginConfigDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get plugin config default response
func (o *GetPluginConfigDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPluginConfigDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
