// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PatchPromethiusIntegrationInfoHandlerFunc turns a function with the right signature into a patch promethius integration info handler
type PatchPromethiusIntegrationInfoHandlerFunc func(PatchPromethiusIntegrationInfoParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchPromethiusIntegrationInfoHandlerFunc) Handle(params PatchPromethiusIntegrationInfoParams) middleware.Responder {
	return fn(params)
}

// PatchPromethiusIntegrationInfoHandler interface for that can handle valid patch promethius integration info params
type PatchPromethiusIntegrationInfoHandler interface {
	Handle(PatchPromethiusIntegrationInfoParams) middleware.Responder
}

// NewPatchPromethiusIntegrationInfo creates a new http.Handler for the patch promethius integration info operation
func NewPatchPromethiusIntegrationInfo(ctx *middleware.Context, handler PatchPromethiusIntegrationInfoHandler) *PatchPromethiusIntegrationInfo {
	return &PatchPromethiusIntegrationInfo{Context: ctx, Handler: handler}
}

/*PatchPromethiusIntegrationInfo swagger:route PATCH /integration/prometheus patchPromethiusIntegrationInfo

updates prometheus instance info and name of cluster

*/
type PatchPromethiusIntegrationInfo struct {
	Context *middleware.Context
	Handler PatchPromethiusIntegrationInfoHandler
}

func (o *PatchPromethiusIntegrationInfo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchPromethiusIntegrationInfoParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
