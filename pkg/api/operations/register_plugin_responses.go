// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/supergiant/analyze/pkg/models"
)

// RegisterPluginOKCode is the HTTP code returned for type RegisterPluginOK
const RegisterPluginOKCode int = 200

/*RegisterPluginOK OK

swagger:response registerPluginOK
*/
type RegisterPluginOK struct {

	/*
	  In: Body
	*/
	Payload *models.Plugin `json:"body,omitempty"`
}

// NewRegisterPluginOK creates RegisterPluginOK with default headers values
func NewRegisterPluginOK() *RegisterPluginOK {

	return &RegisterPluginOK{}
}

// WithPayload adds the payload to the register plugin o k response
func (o *RegisterPluginOK) WithPayload(payload *models.Plugin) *RegisterPluginOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register plugin o k response
func (o *RegisterPluginOK) SetPayload(payload *models.Plugin) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterPluginOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterPluginCreatedCode is the HTTP code returned for type RegisterPluginCreated
const RegisterPluginCreatedCode int = 201

/*RegisterPluginCreated Created

swagger:response registerPluginCreated
*/
type RegisterPluginCreated struct {

	/*
	  In: Body
	*/
	Payload *models.Plugin `json:"body,omitempty"`
}

// NewRegisterPluginCreated creates RegisterPluginCreated with default headers values
func NewRegisterPluginCreated() *RegisterPluginCreated {

	return &RegisterPluginCreated{}
}

// WithPayload adds the payload to the register plugin created response
func (o *RegisterPluginCreated) WithPayload(payload *models.Plugin) *RegisterPluginCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register plugin created response
func (o *RegisterPluginCreated) SetPayload(payload *models.Plugin) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterPluginCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RegisterPluginUnauthorizedCode is the HTTP code returned for type RegisterPluginUnauthorized
const RegisterPluginUnauthorizedCode int = 401

/*RegisterPluginUnauthorized Unauthorized

swagger:response registerPluginUnauthorized
*/
type RegisterPluginUnauthorized struct {
}

// NewRegisterPluginUnauthorized creates RegisterPluginUnauthorized with default headers values
func NewRegisterPluginUnauthorized() *RegisterPluginUnauthorized {

	return &RegisterPluginUnauthorized{}
}

// WriteResponse to the client
func (o *RegisterPluginUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

/*RegisterPluginDefault error

swagger:response registerPluginDefault
*/
type RegisterPluginDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRegisterPluginDefault creates RegisterPluginDefault with default headers values
func NewRegisterPluginDefault(code int) *RegisterPluginDefault {
	if code <= 0 {
		code = 500
	}

	return &RegisterPluginDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the register plugin default response
func (o *RegisterPluginDefault) WithStatusCode(code int) *RegisterPluginDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the register plugin default response
func (o *RegisterPluginDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the register plugin default response
func (o *RegisterPluginDefault) WithPayload(payload *models.Error) *RegisterPluginDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register plugin default response
func (o *RegisterPluginDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterPluginDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
