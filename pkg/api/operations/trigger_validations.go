// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// TriggerValidationsHandlerFunc turns a function with the right signature into a trigger validations handler
type TriggerValidationsHandlerFunc func(TriggerValidationsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TriggerValidationsHandlerFunc) Handle(params TriggerValidationsParams) middleware.Responder {
	return fn(params)
}

// TriggerValidationsHandler interface for that can handle valid trigger validations params
type TriggerValidationsHandler interface {
	Handle(TriggerValidationsParams) middleware.Responder
}

// NewTriggerValidations creates a new http.Handler for the trigger validations operation
func NewTriggerValidations(ctx *middleware.Context, handler TriggerValidationsHandler) *TriggerValidations {
	return &TriggerValidations{Context: ctx, Handler: handler}
}

/*TriggerValidations swagger:route POST /integration/prometheus/validations triggerValidations

This will trigger integration validations of all prometheus components

*/
type TriggerValidations struct {
	Context *middleware.Context
	Handler TriggerValidationsHandler
}

func (o *TriggerValidations) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTriggerValidationsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
