// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// RegisterPluginHandlerFunc turns a function with the right signature into a register plugin handler
type RegisterPluginHandlerFunc func(RegisterPluginParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RegisterPluginHandlerFunc) Handle(params RegisterPluginParams) middleware.Responder {
	return fn(params)
}

// RegisterPluginHandler interface for that can handle valid register plugin params
type RegisterPluginHandler interface {
	Handle(RegisterPluginParams) middleware.Responder
}

// NewRegisterPlugin creates a new http.Handler for the register plugin operation
func NewRegisterPlugin(ctx *middleware.Context, handler RegisterPluginHandler) *RegisterPlugin {
	return &RegisterPlugin{Context: ctx, Handler: handler}
}

/*RegisterPlugin swagger:route POST /plugins registerPlugin

registers plugin

*/
type RegisterPlugin struct {
	Context *middleware.Context
	Handler RegisterPluginHandler
}

func (o *RegisterPlugin) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRegisterPluginParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
