// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ReplacePluginConfigHandlerFunc turns a function with the right signature into a replace plugin config handler
type ReplacePluginConfigHandlerFunc func(ReplacePluginConfigParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ReplacePluginConfigHandlerFunc) Handle(params ReplacePluginConfigParams) middleware.Responder {
	return fn(params)
}

// ReplacePluginConfigHandler interface for that can handle valid replace plugin config params
type ReplacePluginConfigHandler interface {
	Handle(ReplacePluginConfigParams) middleware.Responder
}

// NewReplacePluginConfig creates a new http.Handler for the replace plugin config operation
func NewReplacePluginConfig(ctx *middleware.Context, handler ReplacePluginConfigHandler) *ReplacePluginConfig {
	return &ReplacePluginConfig{Context: ctx, Handler: handler}
}

/*ReplacePluginConfig swagger:route PATCH /plugins/{pluginId}/config replacePluginConfig

substitutes whole plugin config

*/
type ReplacePluginConfig struct {
	Context *middleware.Context
	Handler ReplacePluginConfigHandler
}

func (o *ReplacePluginConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewReplacePluginConfigParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
